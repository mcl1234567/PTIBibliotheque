import java.sql.*;
import java.util.ArrayList;

public class Exploitation {
	private Connection connexion;

	public Exploitation() {
		this.connexion = null;
	}

	/**
	 *	Charge le driver MySQL
	 */
	public void chargerPilote() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch(ClassNotFoundException e) {
			System.err.println("Erreur de chargement du pilote " + e.getMessage());
		}
	}

	/**
	 *	Connexion à la base
	 */
	public void connexion() {
		try {
			String url = "jdbc:mysql://localhost/pti_biblio";
			this.connexion = DriverManager.getConnection(url, "root", "root");
		} catch(SQLException e) {
			erreur(e);
		}
	}

	/**
	 *	Déconnexion
	 */
	public void deconnexion() {
		try {
			if(this.connexion != null) this.connexion.close();
			else System.err.println("Erreur");
		} catch(SQLException e) {
			erreur(e);
		}
	}

	/** 
	 *	Insertion des enregistrements dans la bdd
	 */
	public int insertion(String[] champs, String table, String[] valeur) {
		try {
			String sql = "INSERT INTO " + table + " (";
			for(int i=0; i<champs.length; i++) {
				if(i < champs.length-1) sql += champs[i] + ", ";
				else if(i == champs.length-1) sql += champs[i] + ")";
			}
			sql += " VALUES (";
			for(int i=0; i<valeur.length; i++) {
				if(i == valeur.length-1) sql += "?)";
				else sql += "?, ";
			}
			PreparedStatement preq = this.connexion.prepareStatement(sql);
			for(int i=0; i<champs.length; i++) {
				int j = i + 1;
				if(champs[i].length() >= 4) {
					if(champs[i].substring(0, 6).equalsIgnoreCase("numero") 
					|| champs[i].substring(0, 6).equalsIgnoreCase("nombre") 
					|| champs[i].substring(0, 6).equalsIgnoreCase("crypto")) 	preq.setInt(j, Integer.parseInt(valeur[i]));
					else if(champs[i].substring(0, 4).equalsIgnoreCase("prix")) preq.setFloat(j, Float.parseFloat(valeur[i]));						
					else preq.setString(j, valeur[i]);
				} else preq.setString(j, valeur[i]);
			}			
			preq.executeUpdate();
			ResultSet req = preq.getGeneratedKeys();
			int newid = 0;
			if(req != null && req.next()) newid = req.getInt(1);
			return newid;
		} catch(SQLException e) {
			erreur(e);
		}
		return 0;
	}

	/** 
	 *	Insertion des enregistrements dans la bdd
	 */
	public int insertion(String table, ArrayList<String> champs, ArrayList<String> valeur) {
		try {
			String sql = "INSERT INTO " + table + " (";
			for(int i=0; i<champs.size(); i++) {
				if(i < champs.size()-1) sql += champs.get(i) + ", ";
				else if(i == champs.size()-1) sql += champs.get(i) + ")";
			}
			sql += " VALUES (";
			for(int i=0; i<valeur.size(); i++) {
				if(i == valeur.size()-1) sql += "?)";
				else sql += "?, ";				
			}
			PreparedStatement preq = this.connexion.prepareStatement(sql);
			for(int i=0; i<champs.size(); i++) {
				int j = i + 1;
				if(champs.get(i).length() >= 4) {
					if(champs.get(i).substring(0, 6).equalsIgnoreCase("numero") 
					|| champs.get(i).substring(0, 6).equalsIgnoreCase("nombre") 
					|| champs.get(i).substring(0, 6).equalsIgnoreCase("crypto")) 	preq.setInt(j, Integer.parseInt(valeur.get(i)));
					else if(champs.get(i).substring(0, 4).equalsIgnoreCase("prix")) preq.setFloat(j, Float.parseFloat(valeur.get(i)));
					else preq.setString(j, valeur.get(i));
				} else preq.setString(j, valeur.get(i));
			}
			preq.executeUpdate();
			ResultSet req = preq.getGeneratedKeys();
			int newid = 0;
			if(req != null && req.next()) newid = req.getInt(1);
			return newid;
		} catch(SQLException e) {
			erreur(e);
		}
		return 0;
	}
	
	/** 
	 *	Modification des enregistrements dans la bdd
	 */
	public boolean modification(String[] champs, String table, String[] valeur, String champs_condition, String valeur_condition) {
		try {
			String sql = "UPDATE " + table + " SET ";
			for(int i=0; i<champs.length; i++) {
				if(champs[i].substring(0, 7).equalsIgnoreCase("nombre_") 
				|| champs[i].substring(0, 7).equalsIgnoreCase("numero_") 
				|| champs[i].substring(0, 7).equalsIgnoreCase("dimension_") 
				|| champs[i].substring(0, 7).equalsIgnoreCase("delai_") 
				|| champs[i].substring(0, 6).equalsIgnoreCase("crypto")) {
					if(i == champs.length-1) sql += champs[i] + " = " + valeur[i] + " ";
					else sql += champs[i] + " = " + valeur[i] + ", ";
				} else {
					if(i == champs.length-1) sql += champs[i] + " = " + '"' + valeur[i] + '"' + ' ';
					else sql += champs[i] + " = " + '"' + valeur[i] + '"' + ", ";
				}
			}
			sql += " WHERE " + champs_condition + " = " + valeur_condition;
			PreparedStatement preq = this.connexion.prepareStatement(sql);
			preq.executeUpdate();
			if(preq != null) {
				preq.close();
				return true;
			}			
		} catch(SQLException e) {
			erreur(e);
		}
		return false;
	}

	/**
	 * Affichage amélioré
	 *	@return Tableau de requête SELECT de la table   
	 */
	String[][] lister(String[] champs, String table, String[] champs_condition, String[] valeur_condition) {
		String[][] requete = new String[getLignesTable(table)][champs.length];
		int j = 0;
		try {
			Statement st = this.connexion.createStatement();
			String sql = "SELECT ";
			for(int i=0; i<champs.length; i++) {
				sql += champs[i]; 
				if(i < champs.length-1)	sql += ", ";
				else sql += " ";
			}
			sql += "FROM  " + table + " WHERE ";
			for(int i=0; i<champs_condition.length; i++) {
				if(champs_condition[i].substring(0, 7).equalsIgnoreCase("numero_") 
				|| champs_condition[i].substring(0, 7).equalsIgnoreCase("nombre_") 
				|| champs_condition[i].substring(0, 7).equalsIgnoreCase("nombre_") 
				|| champs_condition[i].substring(0, 9).equalsIgnoreCase("quantite_")
				|| champs_condition[i].substring(0, 6).equalsIgnoreCase("crypto")) {
					if(i == champs_condition.length-1) sql += champs_condition[i] + " = " + valeur_condition[i] + ";";
					else sql += champs_condition[i] + " = " + valeur_condition[i] + ", ";
				} else {
					if(i == champs_condition.length-1) sql += champs_condition[i] + " = " + '"' + valeur_condition[i] + '"' + ";";
					else sql += champs_condition[i] + " = " + '"' + valeur_condition[i] + '"' + ", ";
				}
			}
			ResultSet rs = st.executeQuery(sql);
			while(rs.next() && j<getLignesTable(table)) {
				for(int i=0; i<champs.length; i++) requete[j][i] = rs.getString(champs[i]);
				j++;
			}
			st.close();
		} catch(SQLException e) {
			erreur(e);
		}
		return requete;
	}
	
	/**
	 * Affichage
	 *	@return Tableau de requête SELECT de la table   
	 */
	public String[][] lister(String[] champs, String table) {
		String[][] requete = new String[getLignesTable(table)][champs.length];
		int j = 0;
		try {
			Statement st = this.connexion.createStatement();
			String sql = "SELECT ";
			for(int i=0; i<champs.length; i++) {
				sql += champs[i]; 
				if(i < champs.length-1)	sql += ", ";
				else sql += " ";
			}
			sql += "FROM  " + table;
			ResultSet rs = st.executeQuery(sql);
			while(rs.next() && j<getLignesTable(table)) {
				for(int i=0; i<champs.length; i++) requete[j][i] = rs.getString(champs[i]);
				j++;
			}
			st.close();
		} catch(SQLException e) {
			erreur(e);
		}
		return requete;
	}

	/**
	 *	Suppression d'une ligne pour une requête 
	 */
	public boolean suppression(String table, int ligne) {
		try {
			Statement st = this.connexion.createStatement();
			String sql = "DELETE FROM " + table + " WHERE numero_" + table + " = " + ligne;
			st.executeUpdate(sql);
			st.close();
		} catch(SQLException e) {
			erreur(e);
		}
		return false;
	}

	/**
	 *	Suppression de plusieurs lignes pour une requête 
	 */
	public boolean suppression(String table, int[] ligne) {
		try {
			Statement st = this.connexion.createStatement();
			String sql = "DELETE FROM " + table + " WHERE 1 = 1 ";
			for(int i=0; i<ligne.length; i++) {
				sql += " OR numero_" + table + " = " + ligne[i] + " ";
				if(i == ligne.length-1) {
					sql += " OR numero_" + table + " = " + ligne[i] + ";";
				}
			}
			st.executeUpdate(sql);
			st.close();
		} catch(SQLException e) {
			erreur(e);
		}
		return false;
	}

	/**
	 *	Retourne le nombre de lignes de la table
	 *	@return Nb lignes de la table 
	 */
	int getLignesTable(String table) {
		int total = 0;

		try {
			Statement st = this.connexion.createStatement();	
			String q = "SELECT COUNT(*) AS total FROM " + table;
			ResultSet rs = st.executeQuery(q);
			rs.next();	
			total = Integer.parseInt(rs.getString("total"));
			st.close();
		} catch(SQLException e) {
			erreur(e);
		}	
		return total;
	}

	private void erreur(SQLException e) {
		System.err.println(e.getErrorCode() + " " + e.getMessage());
	}

	/**
	 *	@return Connexion
	 */
	public Connection getConnexion() {
		return this.connexion;
	}

}